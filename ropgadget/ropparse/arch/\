#!/usr/bin/env python2
##
##	We define Instrution as two types "Computing instruction" and "Control Transfer instruction"
##		for computing instruction
##			"NAME" : [ Operand_Number , [ Formula_that_modify_reg ], [ FLAG_reg_modified]]
##		for control transfter instruciton
##			"NAME" : [ Operand_Number , [ Formula_that_modify_reg ], [ DST_Addr_on_condition]]
##
from capstone import *
from expression import Exp
class X86:
    FLAG = ["CF", "PF", "AF", "ZF", "SF", "TF", "IF", "DF", "OF"]
    regs64 = ["rax", "eax", "ax", "ah", "al", "rbx", "ebx", "bh", "bl", "rcx", "cx", "ch", "cl",
            "rdx", "edx", "dh", "dl" "rsi", "rdi", "rbp", "rsp", "r8", "r9", "r10", "r11", "r12",
            "r13", "r14", "r15"]
    regs32 = ["eax", "ax", "ah", "al", "ebx", "bx", "bh", "bl", "ecx", "cx", "ch", "cl", "edx", "dx", "dh", "dl" "CS", "DS", "ES", "FS", "GS", "SS", "esi", "edi", "ebp", "esp", "eip"]
    # Instructions that modifty the execution path
    Control = ["ret", "iret", "int", "into", "enter", "leave", "call", "jmp", "ja", "jae", "jb", "jbe", "jc", "je","jnc", "jne", "jnp", "jp", "jg", "jge", "jl", "jle", "jno", "jns", "jo", "js"]
    insn = {
            # data transfer
	    "mov": [2, ["operand1 = operand2"], []],
	    "cmove": [2, ["operand1 = ( ZF == 1 ) ? operand2 : operand1"], []],
	    "cmovne": [2, ["operand1 = ( ZF == 0 ) ? operand2 : operand1"], []],
	    "cmova": [2, ["operand1 = ( ZF == 0 || CF == 0 ) ? operand2 : operand1"], []],
	    "cmovae": [2, ["operand1 = ( CF == 0 ) ? operand2 : operand1"], []],
	    "cmovb": [2, ["operand1 = ( CF == 1 ) ? operand2 : operand1"], []],
	    "cmovbe": [2, ["operand1 = ( ZF == 1 || CF == 1 ) ? operand2 : operand1"], []],
	    #"cmovg": [2, [""]],
	    "cmovge": [2, ["operand1 = ( SF == 0 || OF == 0 ) ? operand2 : operand1"], []],
	    "cmovl": [2, ["operand1 = ( SF == 1 || OF == 1 ) ? operand2 : operand1"], []],
	    "cmovle": [2, ["operand1 = ( ( ( SF xor OF ) or ZF ) == 1) ? operand2 : operand1"], []],
	    "cmovs": [2, ["operand1 = ( SF == 1 ) ? operand2 : operand1"], []],
	    "cmovp": [2, ["operand1 = ( PF == 1 ) ? operand2 : operand1"], []],
	    "xchg": [2, ["operand1 = operand2", "operand2 = operand1"], []],
	    "bswap": [2, ["operand1"], []],
	    "xadd": [2, ["operand2 = operand1 + operand2", "operand1 = operand2"], ["CF", "PF", "AF", "SF", "ZF", "OF"]],
#	    "cmpxchg": [2, [""],["CF", "PF", "AF", "SF", "ZF", "OF"]],
	    "push": [1, ["* sp = operand1", "sp = sp - length"]],
	    "pop": [1, ["operand1 = * sp", "sp = sp + length"]],
#	    "in": [0],
#	    "out": [0],
#	    "cwde": [1],
#	    "cdq": [1],
#	    "movsx": [2],
#	    "movzx", [2],
        # flag control instuctions
        "stc": [0, ["CF = 1"], []],
	    "clc": [0, ["CF = 0"], []],
	    "cmc": [0, ["CF = ~ CF"], []],
	    "cld": [0, [], ["DF = 0"]],
	    "std": [0, [], ["DF = 1"]],
#	    "lahf": [0],
#	    "shf": [0],
#	    "pushfq": [1],
#	    "popfq": [1],
#	    "sti": [0],
#	    "cli": [0],
        #            # arithmetic
        "cmp": [2, ["temp = operand1 - operand2"], ["CF", "OF", "SF", "ZF", "AF", "PF"]],
#	    "daa": [1],
#	    "das": [1],
#	    "aaa": [1],
#	    "aas": [1],
#	    "aam": [1],
#	    "aad":[1],
	    "add": [2, ["operand1 = operand1 + operand2"], ["OF", "SF", "ZF", "AF", "CF", "PF"]],
	    "adc": [2, ["operand1 = operand1 + operand2 + CF"], ["OF", "SF", "ZF", "AF", "CF", "PF"]],
	    "sub": [2, ["operand1 = operand1 - operand2"], ["OF", "SF", "ZF", "AF", "CF", "PF"]],
	    "sbb": [2, ["operand1 = operand1 - operand2 - CF"], ["OF", "SF", "ZF", "AF", "CF", "PF"]],
#	    "imul": [1],
#	    "mul": [1],
#	    "idiv": [1, "eax = ( edx << 32 + eax ) / operand1", "edx = edx:eax % operand1"],
#	    "div": [1],
	    "inc": [1, ["operand1 = operand1 + 1"], ["OF", "SF", "ZF", "AF", "PF"]],
	    "dec": [1, ["operand1 = operand1 - 1"], ["OF", "SF", "ZF", "AF", "PF"]],
	    "neg": [1, ["operand1 = - operand1"], ["CF", "OF", "SF", "ZF", "AF", "PF"]],
        # control transfer
        #"ret": [1, ["ip = * sp", "sp = sp + length"]],
        "ret": [1, ["sp = sp + length + operand1"], []],
	    "call": [1, [], ["operand1"]],
#	    "int": [0],
#	    "into": [0],
#	    "enter": [2, ["*sp = bp", "sp = sp + length", ""], []],
#	    "leave": [0],

	    "jmp": [1, [], ["operand1"]],
	    "ja": [1, [], ["CF == 0 & ZF == 0 ? operand1 : next"]],
	    "jae": [1, [], ["CF == 0 ? operand1 : next"]],
	    "jb": [1, [] , ["CF == 1 ? operand1 : next"]],
	    "jbe": [1, [] , ["CF == 1 | ZF == 1 ? operand1 : next"]],
	    "jc": [1, [], ["CF == 1 ? operand1 : next"]],
	    "je": [1, [], ["ZF == 1 ? operand1 : next"]],
	    "jnc": [1, [], ["CF == 0 ? operand1 : next"]],
	    "jne": [1, [], ["ZF == 0 ? operand1 : next"]],
	    "jnp": [1, [], ["PF == 0 ? operand1 : next"]],
	    "jp": [1, [], ["PF == 1 ? operadn1 : next"]],
	    "jg": [1, [], ["ZF == 0 & SF == OF ? operand1 : next"]],
	    "jge": [1, [], ["SF == OF ? operand1 : next"]],
	    "jl": [1, [], ["SF != OF ? operand1 : next"]],
	    "jle": [1, [], ["ZF == 1 | SF != OF ? operand1 : next"]],
	    "jno": [1, [], ["OF == 0 ? operand1 : next"]],
	    "jns": [1, [], ["SF == 0 ? operand1 : next"]],
	    "jo": [1, [], ["OF == 1 ? operand1 : next"]],
	    "js": [1, [], ["SF == 1 ? operand1 : next"]],
        # logic
        "and": [2, ["operand1 = operand1 & operand2"], ["CF", "OF", "SF", "ZF", "PF"]],
	    "or": [2, ["operand1 = operand2 | operand2"], ["CF", "OF", "SF", "ZF", "PF"]],
	    "xor": [2, ["operand1 = operand1 ^ operand2"], ["CF","OF", "SF", "ZF", "PF"]],
	    "not": [2, ["operand1 = ~ operand1"], []],
        # shift and rotate
        # For SAR, the sign bit is taken care by python
        # Ex, -2 >> 4 = -1,  2 >> 4 = 0
        "sar": [2, ["operand1 = operand1 >> operand2"] , ["CF = operand1 $ ( operand2 - 1 )"]],
        "shr": [2, ["operand1 = operand1 >> operand2"], ["CF = operand1 $ ( operand2 - 1 )"]],

        "sal": [2, ["operand1 = operand1 << operand2"], ["CF = operand1"]],
        "shl": [2, ["operand1 = operand1 << operand2"], ["CF = operand1"]],
        #	    "shrd": [2],
        #	    "shld": [2],
        #	    "ror": [2],
        #	    "rol": [2],
        #	    "rcr": [2],
        #	    "rcl": [2],
        #            # bit and bytes
        #            "bt", "bts", "btr", "btc", "bsf", "bsr", "sete", "setne", "seta", "setae", "setb", "setbe", "setg", "setge", "setl", "setle", "sets", "setns", "seto", "setno", "setpe", "setpo", "test",
        #            # segment
        #            "lds": [0],
        #	    "les": [0],
        #	    "lfs": [0],
        #	    "lgs": [0],
        #	    "lss": [0],
        #            # others
        "lea": [2, ["operand1 = & operand2"], []],
        "nop": [0, []],
        #	    "xlatb": [1]
        #	    # TODO: string operation, loop operation, MMX instruction, float point, System instruction
#
}
class ROPParserX86:
	def __init__(self, gadgets, mode):
		self.gadgets = gadgets
                self.mode = mode
		if mode == CS_MODE_32:
			self.regs = X86.regs32 + X86.FLAG
                        self.wrap = {"sp":"esp", "ip":"eip", "length":"4"}
                        # wrap the formula with arch_specified regs
                        # Ex: update sp with esp , ip with eip, length with 4
			for o, n in self.wrap.items():
				for k, v in X86.insn.items():
					for i, s in enumerate(v[1]):
						v[1][i] = s.replace(o,n)
					X86.insn.update({k:v})
                else:
			self.regs = X86.regs64 + X86.FLAG
                        self.wrap = {"sp":"rsp", "ip":"rip", "length":"8"}
			for o, n in self.wrap.items():
				for k, v in X86.insn.items():
					for i, s in enumerate(v[1]):
						v[1][i] = s.replace(o,n)
					X86.insn.update({k:v})

	def parseInst(self, regs, insts, i, flags):
		# all control transfer dst must bewteen low and high addr
		inst = insts[i]
		addr = inst["addr"]
		prefix = inst["mnemonic"]
		op_str = inst["op_str"]
		ins = X86.insn.get(prefix)
		print prefix, op_str
		if prefix in X86.Control:
			# control transfer ins
			operand1 = None
			operands = {}
			# for call and ret instruction, this gadget is done
			if prefix == "ret":
				operand1 = Exp.parseOperand(inst.split(", ")[0], self.regs)

			if prefix == "ret" or prefix == "call":
				return regs

			operand1 = Exp.parseOperand(inst.split(", ")[0], self.regs)
			operands.update({"operand1":operand1})
			dst = Exp.parse(ins[2], operands)

			if dst.diverged():
				# handle conditional jmp
				# dup all the exps on the condition, then handle the rest
				# TODO, need to check dst validity first
				con = dst.getCondition()
				con = con.binding(flags)
				regs1 = copy(regs)
				index = dst.getOperand1().transferTo(regs, decodes, addr)
				if index != -1:
					regs = self.parseInst(regs, insts, index)

				index = dst.getOperand2().transferTo(regs, decodes, addr)
				if index != -1:
					regs1 = parseInst(regs1, insts, index)

				r = {}
				for k,v in regs:
					r[k] = None
				for k,v in regs1:
					r[k] = None;
				for k,v in r:
					r[k] = Exp(con, regs[k], regs1[k])
				return r
			else:
				# for direct jmp, it depends on the address
				index = dst.transferTo(regs, decodes, addr)
				if index != -1:
					return parseInst(regs, insts, index)
				return regs
		else:
			# computing ins
			operand1 = None
			operand2 = None
			if ins[0] == 1:
				operand1 = Exp.parseOperand(op_str.split(", ")[0], self.regs)
			elif ins[0] == 2:
				operand1 = Exp.parseOperand(op_str.split(", ")[0], self.regs)
				operand2 = Exp.parseOperand(op_str.split(", ")[1], self.regs)
			# contruct all exps based on the instruction
			operands = {}
			if operand1 != None:
				operands.update({"operand1":operand1})
			if operand2 != None:
				operands.update({"operand2":operand2})

		    	# bind previous exps with new exp
			exps = Exp.parse(ins[1], operands)
			for k,v in exps.items():
				v = v.binding(regs)

			# update the EFLAG reg if needed
			if len(ins[2]) != 0:
				exps = Exp.parse(ins[2], operands)
				for k, v in exps.items():
					flags.update({k:v})

		    	# update current regs status
		    	for k,v in exps.items():
				regs.update({k:v})
				print k, "==>",  v
			i = i + 1
			if i == len(insts):
				return regs
			return self.parseInst(regs, insts, i, flags)


	def parse(self):
		formulas = []
		for gadget in self.gadgets:
			regs = {}
			flags = {}
			regs = self.parseInst(regs, gadget, 0, flags)
			formulas.append(regs)
		return formulas


if __name__ == '__main__':
	binary = b"\x8d\x4c\x32\x08\x01\xd8\x81\xc6\x34\x12\x00\x00\x05\x23\x01\x00\x00\x36\x8b\x84\x91\x23\x01\x00\x00\x41\x8d\x84\x39\x89\x67\x00\x00\x8d\x87\x89\x67\x00\x00\xb4\xc6"
	#binary = b"\x8d\x4c\x32\x08\x01\xd8\x81\xc6\x34\x12\x00\x00"
	md = Cs(CS_ARCH_X86, CS_MODE_32)
	md.detail = True
	gadget = []
	for decode in md.disasm(binary, 0x1000):
		inst = {}
		inst.update({"mnemonic": decode.mnemonic})
		inst.update({"op_str": decode.op_str})
		inst.update({"addr": decode.addr})
		gadget.append(inst)

	gadgets = []
	gadgets.append(gadget)
	p = ROPParserX86(gadgets, CS_MODE_32)
	formulas = p.parse()
